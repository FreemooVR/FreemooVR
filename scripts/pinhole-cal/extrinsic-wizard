#!/usr/bin/env python
# -*- Mode: python; tab-width: 4; indent-tabs-mode: nil; indent-offset: 4 -*-
import os.path
import argparse
import yaml
import numpy as np

import roslib; roslib.load_manifest('flyvr')

import rospy
import std_msgs.msg

import simple_geom
import camera_model
import display_client

import rosgobject.wrappers
from gi.repository import Gtk

def nice_float_fmt(treeviewcolumn, cell, model, iter, column):
    float_in = model.get_value(iter, column)
    cell.set_property('text', '%g'%float_in )

class UI:
    def __init__(self, ds, cam, geometry_filename):
        self.dsc = display_client.DisplayServerProxy(ds,wait=True)

        self.dsc.set_mode('Stimulus2DBlit')

        with open(geometry_filename,mode='r') as fd:
            self._geom_dict = yaml.load( fd )
        self.geom = simple_geom.Geometry(filename=geometry_filename)

        me = os.path.dirname(os.path.abspath(__file__))
        ui_fname = os.path.join(me,"extrinsic-wizard.ui")

        self.red_bg_provider = Gtk.CssProvider()
        self.red_bg_provider.load_from_data('GtkEntry { background: red; }')

        self._ui = Gtk.Builder()
        self._ui.add_from_file(ui_fname)

        self._build_ui()

        self.a1 = a1 = self._ui.get_object("assistant1")
        #a1.set_default_size(600,400)
        a1.connect("delete-event", rosgobject.main_quit)
        a1.show_all()

    def _build_ui(self):

        # load select viewport combobox ----------------
        viewportstore = Gtk.ListStore(str)
        di = self.dsc.get_display_info()

        if 'virtualDisplays' in di:
            for viewport_dict in di['virtualDisplays']:
                viewportstore.append([viewport_dict['id']])
        else:
            viewport_dict = None # full screen
            viewportstore.append('<full screen>')

        cb1 = self._ui.get_object('selectviewport_combobox')
        cb1.set_model( viewportstore )
        cb1.connect("changed", self.on_selectviewport_selected)

        # create treeview --------------------------

        self.liststore = Gtk.ListStore(float, float, float, float, bool, str)
        self._add_pt_entry( 0.,   0.   )

        treeview = self._ui.get_object('treeview1')
        #treeview.get_selection().set_mode( Gtk.SELECTION_SINGLE )
        treeview.set_model( self.liststore )

        renderer_text = Gtk.CellRendererText()
        #renderer_text.set_property("editable", True)
        #renderer_text.connect("edited", self.on_U_edited)
        column_text = Gtk.TreeViewColumn("texture U", renderer_text, text=0)
        column_text.set_cell_data_func(renderer_text, nice_float_fmt, func_data=0)
        treeview.append_column(column_text)

        renderer_text = Gtk.CellRendererText()
        #renderer_text.set_property("editable", True)
        #renderer_text.connect("edited", self.on_V_edited)
        column_text = Gtk.TreeViewColumn("texture V", renderer_text, text=1)
        column_text.set_cell_data_func(renderer_text, nice_float_fmt, func_data=1)
        treeview.append_column(column_text)

        renderer_text = Gtk.CellRendererText()
        column_text = Gtk.TreeViewColumn("display X", renderer_text, text=2)
        column_text.set_cell_data_func(renderer_text, nice_float_fmt, func_data=2)
        treeview.append_column(column_text)

        renderer_text = Gtk.CellRendererText()
        column_text = Gtk.TreeViewColumn("display Y", renderer_text, text=3)
        column_text.set_cell_data_func(renderer_text, nice_float_fmt, func_data=3)
        treeview.append_column(column_text)

        renderer_toggle = Gtk.CellRendererToggle()
        renderer_toggle.connect("toggled", self.on_show_UV_pixel)
        column_toggle = Gtk.TreeViewColumn("show", renderer_toggle, active=4)
        treeview.append_column(column_toggle)

        if 1:
            # crappy toggle until we can do point
            renderer_pixbuf = Gtk.CellRendererToggle()
            renderer_pixbuf.connect("toggled", self.on_do_point)
        else:
            renderer_pixbuf = Gtk.CellRendererPixbuf()
        column_pixbuf = Gtk.TreeViewColumn('Click to edit', renderer_pixbuf, stock_id=5)
        treeview.append_column(column_pixbuf)

        # connect treeview buttons

        add_button = self._ui.get_object("UV_add_button")
        add_button.connect("clicked", self.on_add_UV)

        remove_button = self._ui.get_object("UV_remove_button")
        remove_button.connect("clicked", self.on_remove_UV)

    def on_do_point(self, widget, path):
        val = self.liststore[path]
        print 'doing point',val

    def on_add_UV(self, button):
        dialog = self._ui.get_object("dialog1")
        while 1:
            response = dialog.run()
            if response == Gtk.ResponseType.OK:
                all_OK = True

                entry = self._ui.get_object('texture_U_text_field')
                style_context = entry.get_style_context()
                val = entry.get_text()
                try:
                    valf = float(val)
                    assert valf >= 0
                    assert valf <= 1
                except:
                    style_context.add_provider(self.red_bg_provider,
                                               Gtk.STYLE_PROVIDER_PRIORITY_USER)
                    all_OK = False
                else:
                    style_context.remove_provider(self.red_bg_provider)
                    U = valf

                entry = self._ui.get_object('texture_V_text_field')
                style_context = entry.get_style_context()
                val = entry.get_text()
                try:
                    valf = float(val)
                    assert valf >= 0
                    assert valf <= 1
                except:
                    style_context.add_provider(self.red_bg_provider,
                                               Gtk.STYLE_PROVIDER_PRIORITY_USER)
                    all_OK = False
                else:
                    style_context.remove_provider(self.red_bg_provider)
                    V = valf

                # check all OK,
                if all_OK:
                    self._add_pt_entry( U, V )
                    break
            elif response == Gtk.ResponseType.CANCEL:
                break

        dialog.hide()

    def on_remove_UV(self,button):
        treeview = self._ui.get_object('treeview1')
        selection = treeview.get_selection()
        sel = selection.get_selected()
        if not sel[1] == None:
            print 'sel[1]',sel[1]
            self.liststore.remove( sel[1] )

    def _add_pt_entry(self, texU, texV,
                      displayX=float(np.nan), displayY=float(np.nan),
                      show_point=False, icon=Gtk.STOCK_EXECUTE):
        self.liststore.append([texU, texV,
                               displayX, displayY,
                               show_point, icon])

    def on_show_UV_pixel(self, widget, path):
        self.liststore[path][4] = not self.liststore[path][4]

    def on_selectviewport_selected(self, combobox):
        sv = self._ui.get_object('selectviewport')
        self.a1.set_page_complete(sv, True)

if __name__ == "__main__":
    #rospy.init_node("extrinsic_wizard",disable_signals=False)
    rospy.init_node("extrinsic_wizard")
    rosgobject.get_ros_thread() #ensure ros is spinning
    rosgobject.add_console_logger()


    parser = argparse.ArgumentParser()

    parser.add_argument('--intrinsic_fname', type=str, required=True,
                        help='filename  (.bag or .yaml) intrinsic parameters')

    parser.add_argument('--geom_fname', type=str, required=True,
                        help='filename  (.json) specifying display geometry')

    parser.add_argument('--display_server', type=str,
                        required=True,
                        help='the path of the display server to configure')

    argv = rospy.myargv()
    args = parser.parse_args(argv[1:])

    cam = camera_model.load_camera_from_file( args.intrinsic_fname,
                                              extrinsics_required=False )

    u = UI(args.display_server, cam, args.geom_fname)

    Gtk.main()
