#!/usr/bin/env python
# /* -*- Mode: Python; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
import argparse

import roslib; roslib.load_manifest('flyvr')
import rospy

from geometry_msgs.msg import Pose2D
from sensor_msgs.msg import Joy

import display_client

import os

class App:
    def __init__(self,button=0):
        rospy.init_node('joystick_cursor')

        self.display_server = display_client.DisplayServerProxy()
        self.old_mode = self.display_server.get_mode()
        self.display_server.set_mode('Stimulus2DSprite')

        self.pub = rospy.Publisher('sprite_pose', Pose2D)
        self.pubclick = rospy.Publisher('joy_click_pose', Pose2D)
        joy_sub = rospy.Subscriber('joy', Joy, self.joy_callback)

        self.cur_joy_x = 0
        self.cur_joy_y = 0

        self.x = 100
        self.y = 100

        self.button_idx = button
        self.button_state = None

        self._gain_k = rospy.get_param('~gain_k', 2.0)
        self._gain_p = rospy.get_param('~gain_p', 3.0)

    def _gain_func(self, x):
        return (self._gain_k * x)**self._gain_p

    def joy_callback(self, msg):
        self.cur_joy_x = msg.axes[0]
        self.cur_joy_y = msg.axes[1]

        cur_state = msg.buttons[self.button_idx]
        if cur_state != self.button_state:
            self.button_state = cur_state

            if self.button_state:
                print '%.1f %.1f'%(self.x, self.y)
                self.pubclick.publish(
                    Pose2D(float(self.x), float(self.y), 0.0))
        
    def run(self):
        while not rospy.is_shutdown():
            self.x -= self._gain_func( self.cur_joy_x )
            self.y -= self._gain_func( self.cur_joy_y )

            pose2d = Pose2D()
            pose2d.x=self.x
            pose2d.y=self.y
            pose2d.theta = 0.0
            self.pub.publish(pose2d)

            rospy.sleep(0.1)

        self.display_server.set_mode(self.old_mode)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--button', default=0, type=int,
                        help='the button number to listen to (PS3 square: 15)')
    argv = rospy.myargv()
    args = parser.parse_args(argv[1:])

    app = App(button=args.button)
	app.run()

if __name__=='__main__':
    main()
