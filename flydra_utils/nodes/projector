#!/usr/bin/env python
# -*- Mode: python; tab-width: 4; indent-tabs-mode: nil; indent-offset: 4 -*-

import roslib; roslib.load_manifest('flydra_utils')
import rospy

import time
import threading

import flydra_utils.srv

import viewsonicprojector.projector

class ROSProjector:
    def __init__(self, ip, debug=False):
        self.p = viewsonicprojector.projector.ProjectorPJD6381(host=ip, debug=debug)
        self.lock = threading.Lock()

        s = rospy.Service('~set_power', flydra_utils.srv.SetPower, self.handle_set_power)
        s = rospy.Service('~set_brightness', flydra_utils.srv.SetBrightness, self.handle_set_brightness)
        s = rospy.Service('~get_power', flydra_utils.srv.GetPower, self.handle_get_power)

    def handle_set_power(self, req):
        if self.p.is_up():
            with self.lock:
                self.p.set_power(req.power)
        return flydra_utils.srv.SetPowerResponse()

    def handle_get_power(self, req):
        on = False
        if self.p.is_up():
            with self.lock:
                on = self.p.get_power()
        return flydra_utils.srv.GetPowerResponse(on)

    def handle_set_brightness(self, req):
        bright = 0
        if self.p.is_up():
            with self.lock:
                bright = self.p.set_brightness(req.brightness)
        return flydra_utils.srv.SetBrightnessResponse(bright)

    def spin(self):
        rospy.spin()    

if __name__ == "__main__":
    rospy.init_node('projector')
    r = ROSProjector(
            rospy.get_param('~ip'),
            rospy.get_param('~debug', False))
    r.spin()

