#!/usr/bin/env python
# -*- Mode: python; tab-width: 4; indent-tabs-mode: nil; indent-offset: 4 -*-

import roslib; roslib.load_manifest('flydra_utils')
import rospy

import sys
import time
import threading

print sys.path

import flydra_utils.srv

import bkprecision.supply

class ROSLightingController:
    def __init__(self, serial, debug):
        self.p = bkprecision.supply.Supply1696_1698(serial, debug=debug)
        self.lock = threading.Lock()

        s = rospy.Service('~set_psu_power', flydra_utils.srv.SetPSUPower, self.handle_set_psu_power)
        s = rospy.Service('~get_psu_power', flydra_utils.srv.GetPSUPower, self.handle_get_psu_power)
        s = rospy.Service('~set_power', flydra_utils.srv.SetPower, self.handle_set_power)

    def handle_set_power(self, req):
        with self.lock:
            with self.p:
                if req.power == True:
                    self.p.enable_output()
                else:
                    self.p.disable_output()
        return flydra_utils.srv.SetPowerResponse()

    def handle_set_psu_power(self, req):
        v,i,mode = (0.0,0.0,"NA")
        with self.lock:
            with self.p:
                for j in range(15):
                    if j == 3:
                        self.p.voltage(req.voltage)
                    if j == 5:
                        self.p.current(req.current)
                    if j == 7:
                        self.p.enable_output()
                    time.sleep(0.2)
                v,i,mode = self.p.reading()
        return flydra_utils.srv.SetPSUPowerResponse(voltage=v,current=i,mode=mode)

    def handle_get_psu_power(self, req):
        v,i,mode = (0.0,0.0,"NA")
        with self.lock:
            with self.p:
                v,i,mode = self.p.reading()
        return flydra_utils.srv.GetPSUPowerResponse(voltage=v,current=i,mode=mode)

    def spin(self):
        rospy.spin()
        self.p.close()

if __name__ == "__main__":
    rospy.init_node('lightingcontroller')
    r = ROSLightingController(
            rospy.get_param('~device'),
            rospy.get_param('~debug', False))
    r.spin()

